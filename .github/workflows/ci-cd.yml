name: College ERP CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test -Dspring.profiles.active=test
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Application
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: target/*.jar

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run security scan
      run: mvn clean compile org.owasp:dependency-check-maven:check

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Compile and check style
      run: mvn clean compile checkstyle:check

    - name: Run SpotBugs
      run: mvn spotbugs:check
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: target/

    - name: Deploy to Render
      run: |
        echo "Deploying to Render..."
        # Add your deployment script here
        # This could trigger a webhook to Render or use their CLI

    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)

# Environment secrets needed:
# - TEST_DATABASE_URL: Test database connection string
# - TEST_DB_USERNAME: Test database username  
# - TEST_DB_PASSWORD: Test database password
# - TEST_JWT_SECRET: Test JWT secret key
